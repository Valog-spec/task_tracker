services:

  streamlit_app:
    build: ./streamlit
    environment:
     API_BASE_URL: ${API_BASE_URL:-http://app:8080}
    ports:
      - "8501:8501"
  app:
    build: ./app
    ports:
      - "8080:8080"
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-secret-key}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      POSTGRES_USER: ${POSTGRES_USER:-myapp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-myapp_password}
      POSTGRES_DB: ${POSTGRES_DB:-myapp}
      POSTGRES_HOST: ${POSTGRES_HOST:-db_postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
    depends_on:
      db_postgres:
        condition: service_healthy
      redis:
        condition: service_started

  db_postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-myapp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-myapp_password}
      POSTGRES_DB: ${POSTGRES_DB:-myapp}
      POSTGRES_LOG_DESTINATION: stderr
      POSTGRES_LOGGING_COLLECTOR: on
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-myapp_user} -d ${POSTGRES_DB:-myapp}" ]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 15s

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes
